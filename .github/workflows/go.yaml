name: "build"
on:
  push:
    branches: ["main"]
    paths: ["**.go", "**.mod", "**.sum", "test/**"]
env:
  GOTOOLCHAIN: local
permissions: {}
jobs:
  # Split build and lint into a few different jobs so they can run in parallel.
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions: {contents: read}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Build code
        run: |
          go build ./...
  lint:
    name: Lint
    runs-on: ubuntu-latest
    permissions: {contents: read}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Install goimports
        run: go install golang.org/x/tools/cmd/goimports@latest
      - run: goimports -w .
      # Download all modules for all go.mod files
      - name: Run go mod tidy on all modules
        run: find . -name go.mod -execdir go mod tidy \;
      - name: Remove any toolchain lines
        run: find . -name go.mod -execdir go get toolchain@none \;
      # If there are any diffs from goimports or go mod tidy, fail.
      - name: Verify no changes from goimports and go mod tidy.
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo 'To fix this check, run "goimports -w . && find . -name go.mod -execdir go mod tidy \;"'
            git status # Show the files that failed to pass the check.
            exit 1
          fi
    # - name: shellcheck
    #   run: find . -name "*.sh" -exec shellcheck {} \;
  vet:
    name: Vet
    runs-on: ubuntu-latest
    permissions: {contents: read}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: Checkout code
        uses: actions/checkout@v4
      - name: go vet
        run: |
          go vet ./...
  test:
    name: Root tests
    runs-on: ubuntu-latest
    permissions: {contents: read}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: Check code
        uses: actions/checkout@v4
      - run: go test -v
  coverage:
    name: Code coverage
    runs-on: ubuntu-latest
    permissions: {contents: read}
    steps:
      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      - name: Check code
        uses: actions/checkout@v4
      - name: Generate coverage
        run:
          go test -race -covermode=atomic -coverprofile=coverage.out
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
